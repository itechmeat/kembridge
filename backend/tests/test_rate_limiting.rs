// test_rate_limiting_unit.rs - Unit —Ç–µ—Å—Ç—ã –¥–ª—è RateLimitService
// 
// –ó–∞–ø—É—Å–∫: cargo test --test test_rate_limiting_unit
//

#[cfg(test)]
mod tests {
    use std::time::Duration;
    use redis::aio::ConnectionManager;
    use sqlx::PgPool;
    use kembridge_backend::services::rate_limit::RateLimitService;
    use kembridge_backend::constants::*;

    async fn setup_test_env() -> (ConnectionManager, PgPool) {
        // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
        todo!("Setup test Redis and PostgreSQL for rate limiting tests")
    }

    #[tokio::test]
    async fn test_rate_limit_service_creation() {
        println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è RateLimitService");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        assert!(RATE_LIMIT_DEFAULT_WINDOW_SEC > 0);
        assert!(RATE_LIMIT_HEALTH_LIMIT > 0);
        assert!(RATE_LIMIT_AUTH_UNAUTH_LIMIT > 0);
        
        println!("‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã rate limiting –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
        println!("   DEFAULT_WINDOW: {} —Å–µ–∫", RATE_LIMIT_DEFAULT_WINDOW_SEC);
        println!("   HEALTH_LIMIT: {} –∑–∞–ø—Ä–æ—Å–æ–≤", RATE_LIMIT_HEALTH_LIMIT);
        println!("   AUTH_UNAUTH_LIMIT: {} –∑–∞–ø—Ä–æ—Å–æ–≤", RATE_LIMIT_AUTH_UNAUTH_LIMIT);
    }

    #[tokio::test]
    async fn test_rate_limit_constants() {
        println!("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö rate limiting –∫–æ–Ω—Å—Ç–∞–Ω—Ç");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        assert_eq!(RATE_LIMIT_DEFAULT_WINDOW_SEC, 60);
        assert!(RATE_LIMIT_HEALTH_LIMIT >= 100); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        assert!(RATE_LIMIT_BRIDGE_PREMIUM_LIMIT > RATE_LIMIT_BRIDGE_AUTH_LIMIT);
        assert!(RATE_LIMIT_BRIDGE_AUTH_LIMIT > RATE_LIMIT_BRIDGE_UNAUTH_LIMIT);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –ø—Ä–µ—Ñ–∏–∫—Å—ã
        assert!(!RATE_LIMIT_REDIS_PREFIX.is_empty());
        assert!(!RATE_LIMIT_STATS_REDIS_PREFIX.is_empty());
        
        println!("‚úÖ –í—Å–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        println!("   Bridge Premium: {} –∑–∞–ø—Ä–æ—Å–æ–≤", RATE_LIMIT_BRIDGE_PREMIUM_LIMIT);
        println!("   Bridge Auth: {} –∑–∞–ø—Ä–æ—Å–æ–≤", RATE_LIMIT_BRIDGE_AUTH_LIMIT);
        println!("   Bridge Unauth: {} –∑–∞–ø—Ä–æ—Å–æ–≤", RATE_LIMIT_BRIDGE_UNAUTH_LIMIT);
    }

    #[test]
    fn test_rate_limit_configuration_logic() {
        println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ rate limiting");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é
        let limits = vec![
            ("Health", RATE_LIMIT_HEALTH_LIMIT),
            ("Docs", RATE_LIMIT_DOCS_LIMIT),
            ("Auth Authenticated", RATE_LIMIT_AUTH_AUTH_LIMIT),
            ("Auth Unauthenticated", RATE_LIMIT_AUTH_UNAUTH_LIMIT),
            ("Bridge Premium", RATE_LIMIT_BRIDGE_PREMIUM_LIMIT),
            ("Bridge Auth", RATE_LIMIT_BRIDGE_AUTH_LIMIT),
            ("Bridge Unauthenticated", RATE_LIMIT_BRIDGE_UNAUTH_LIMIT),
        ];
        
        for (name, limit) in limits {
            assert!(limit > 0, "–õ–∏–º–∏—Ç –¥–ª—è {} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0", name);
            assert!(limit <= 10000, "–õ–∏–º–∏—Ç –¥–ª—è {} —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π: {}", name, limit);
            println!("   {}: {} –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω", name, limit);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ premium > auth > unauth
        assert!(RATE_LIMIT_BRIDGE_PREMIUM_LIMIT > RATE_LIMIT_BRIDGE_AUTH_LIMIT);
        assert!(RATE_LIMIT_BRIDGE_AUTH_LIMIT > RATE_LIMIT_BRIDGE_UNAUTH_LIMIT);
        assert!(RATE_LIMIT_AUTH_AUTH_LIMIT > RATE_LIMIT_AUTH_UNAUTH_LIMIT);
        
        println!("‚úÖ –õ–æ–≥–∏–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (premium > auth > unauth)");
    }

    #[test] 
    fn test_rate_limit_window_calculations() {
        println!("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω");
        
        let default_window = Duration::from_secs(RATE_LIMIT_DEFAULT_WINDOW_SEC);
        let extended_window = Duration::from_secs(RATE_LIMIT_EXTENDED_WINDOW_SEC);
        let stats_cache_ttl = Duration::from_secs(RATE_LIMIT_STATS_CACHE_TTL_SEC);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–∫–Ω–∞ –∏–º–µ—é—Ç —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        assert!(default_window.as_secs() >= 30, "Default window —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ");
        assert!(default_window.as_secs() <= 300, "Default window —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ");
        
        assert!(extended_window >= default_window, "Extended window –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= default");
        assert!(stats_cache_ttl >= default_window, "Stats cache TTL –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= default");
        
        println!("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        println!("   Default: {} —Å–µ–∫", default_window.as_secs());
        println!("   Extended: {} —Å–µ–∫", extended_window.as_secs());
        println!("   Stats Cache TTL: {} —Å–µ–∫", stats_cache_ttl.as_secs());
    }
}

// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö Redis –∏ PostgreSQL)
#[cfg(test)]
mod integration_tests {
    use super::*;
    
    #[tokio::test]
    #[ignore] // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    async fn test_rate_limit_service_integration() {
        println!("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç RateLimitService");
        println!("   –¢—Ä–µ–±—É–µ—Ç: Redis + PostgreSQL");
        
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å: cargo test test_rate_limit_service_integration -- --ignored
        // –∫–æ–≥–¥–∞ Redis –∏ PostgreSQL –∑–∞–ø—É—â–µ–Ω—ã
        
        // let (redis, db_pool) = setup_test_env().await;
        // let service = RateLimitService::new(redis, db_pool);
        // 
        // let result = service.check_rate_limit(
        //     "test_key",
        //     10,
        //     Duration::from_secs(60),
        //     "test",
        //     Some("test_user"),
        //     "127.0.0.1"
        // ).await;
        // 
        // assert!(result.is_ok());
        
        println!("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É)");
    }
}