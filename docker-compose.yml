version: "3.8"

services:
  # ========== DATABASE LAYER ==========
  postgres:
    image: postgres:18beta1
    container_name: kembridge_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: kembridge_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c track_activity_query_size=2048
      -c pg_stat_statements.track=all
      -c log_statement=all
      -c log_min_duration_statement=0
    networks:
      - kembridge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:8.0.3-alpine
    container_name: kembridge_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass dev_redis_password
    networks:
      - kembridge-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "dev_redis_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========== BACKEND SERVICES ==========
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: kembridge_backend
    restart: unless-stopped
    ports:
      - "4000:3000"
    environment:
      - DATABASE_URL=postgresql://postgres:dev_password@postgres:5432/kembridge_dev
      - REDIS_URL=redis://:dev_redis_password@redis:6379
      - JWT_SECRET=hackathon-super-secret-key-change-in-production
      - ETHEREUM_RPC_URL=https://sepolia.infura.io/v3/YOUR_INFURA_KEY
      - NEAR_RPC_URL=https://rpc.testnet.near.org
      - RUST_LOG=debug
      - CORS_ORIGINS=http://localhost:4001
    volumes:
      - ./backend:/app
      - backend_target:/app/target # Cache Rust builds
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kembridge-network
    command: cargo run --bin kembridge-backend

  # ========== AI SERVICES ==========
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: kembridge_ai_engine
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:dev_password@postgres:5432/kembridge_dev
      - REDIS_URL=redis://:dev_redis_password@redis:6379
      - PYTHONPATH=/app
      - MODEL_PATH=/app/models
    volumes:
      - ./ai-engine:/app
      - ai_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kembridge-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # ========== FRONTEND ==========
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: kembridge_frontend
    restart: unless-stopped
    ports:
      - "4001:3000" # Vite dev server
    environment:
      - VITE_API_BASE_URL=http://localhost:4000/api/v1
      - VITE_AI_ENGINE_URL=http://localhost:8000
      - VITE_WALLET_CONNECT_PROJECT_ID=YOUR_WALLET_CONNECT_PROJECT_ID
      - VITE_CHAIN_ID_ETHEREUM=11155111
      - VITE_CHAIN_ID_NEAR=testnet
      - WS_NO_BUFFER_UTIL=1
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_pnpm_store:/root/.local/share/pnpm/store
    depends_on:
      - backend
      - ai-engine
    networks:
      - kembridge-network
    command: pnpm run dev -- --host 0.0.0.0

  # ========== REVERSE PROXY ==========
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: kembridge_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - frontend
      - backend
      - ai-engine
    networks:
      - kembridge-network

  # ========== MONITORING ==========
  prometheus:
    image: prom/prometheus:v2.53.1
    container_name: kembridge_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - kembridge-network

  grafana:
    image: grafana/grafana:11.1.3
    container_name: kembridge_grafana
    restart: unless-stopped
    ports:
      - "4002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - kembridge-network

volumes:
  postgres_data:
  redis_data:
  backend_target:
  frontend_node_modules:
  frontend_pnpm_store:
  ai_models:
  prometheus_data:
  grafana_data:

networks:
  kembridge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
