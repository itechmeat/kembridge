/**
 * Gateway Crypto Proxy Integration Tests
 *
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç gateway-service:4000 –∫ crypto-service:4003.
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ù–ï –ø–æ–∫—Ä—ã—Ç–∞ Rust unit —Ç–µ—Å—Ç–∞–º–∏ –∏ –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
 */

import { test, expect } from "@playwright/test";

const GATEWAY_URL = "http://localhost:4000";
const CRYPTO_SERVICE_URL = "http://localhost:4003";

test.describe("Gateway Crypto Proxy Integration Tests", () => {
  test.describe("Proxy Status Endpoints", () => {
    test("should proxy /crypto/status to crypto-service", async ({
      request,
    }) => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ gateway
      const gatewayResponse = await request.get(
        `${GATEWAY_URL}/api/v1/crypto/status`
      );

      expect(gatewayResponse.ok()).toBe(true);

      const gatewayData = await gatewayResponse.json();
      console.log(
        "üåê Gateway Proxy Response:",
        JSON.stringify(gatewayData, null, 2)
      );

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ crypto-service
      const directResponse = await request.get(`${CRYPTO_SERVICE_URL}/status`);
      const directData = await directResponse.json();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ gateway –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      expect(gatewayData).toHaveProperty("success", true);
      expect(gatewayData).toHaveProperty("data");

      const gatewayQuantumData = gatewayData.data;
      const directQuantumData = directData.data;

      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å (Gateway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç camelCase)
      expect(gatewayQuantumData).toHaveProperty("quantumProtection");
      expect(gatewayQuantumData.quantumProtection.algorithm).toBe(
        "ML-KEM-1024"
      );
      expect(gatewayQuantumData.quantumProtection.encryptionStrength).toBe(
        1024
      );

      console.log("‚úÖ Gateway successfully proxies crypto status");
      console.log(
        `   Quantum Protection: ${
          gatewayQuantumData.quantumProtection.isActive ? "ACTIVE" : "INACTIVE"
        }`
      );
    });

    test("should handle crypto-service unavailable gracefully", async ({
      request,
    }) => {
      // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ crypto-service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      // –ú—ã –Ω–µ –º–æ–∂–µ–º –ª–µ–≥–∫–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å, –Ω–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å timeout behavior

      const response = await request.get(`${GATEWAY_URL}/api/v1/crypto/status`);

      // –ï—Å–ª–∏ crypto-service —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      // –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, gateway –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ fallback
      if (response.ok()) {
        const data = await response.json();
        expect(data).toHaveProperty("success", true);
        console.log("‚úÖ Crypto service available through gateway");
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ gateway –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
        expect(response.status()).toBeGreaterThanOrEqual(500);
        console.log("‚úÖ Gateway handles crypto service unavailability");
      }
    });
  });

  test.describe("Proxy Key Management", () => {
    test("should proxy key generation requests", async ({ request }) => {
      const keyRequest = {
        key_type: "ml_kem_1024",
        purpose: "gateway_proxy_test",
      };

      // –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ gateway
      const gatewayResponse = await request.post(
        `${GATEWAY_URL}/api/v1/crypto/keys/generate`,
        {
          data: keyRequest,
        }
      );

      expect(gatewayResponse.ok()).toBe(true);

      const gatewayData = await gatewayResponse.json();
      console.log(
        "üîë Gateway Key Generation:",
        JSON.stringify(gatewayData, null, 2)
      );

      expect(gatewayData).toHaveProperty("success", true);
      expect(gatewayData).toHaveProperty("data");

      const keyData = gatewayData.data;
      expect(keyData).toHaveProperty("keyId");
      expect(keyData).toHaveProperty("algorithm", "ML-KEM-1024");
      expect(keyData).toHaveProperty("publicKey");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ keyId —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π UUID
      const uuidRegex =
        /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
      expect(keyData.keyId).toMatch(uuidRegex);

      console.log("‚úÖ Gateway successfully proxies key generation");
      console.log(`   Generated Key ID: ${keyData.keyId}`);
    });

    test("should proxy key listing requests", async ({ request }) => {
      const response = await request.get(`${GATEWAY_URL}/api/v1/crypto/keys`);

      expect(response.ok()).toBe(true);

      const data = await response.json();
      console.log("üóÇÔ∏è Gateway Keys List:", JSON.stringify(data, null, 2));

      expect(data).toHaveProperty("success", true);
      expect(data).toHaveProperty("data");

      const keysData = data.data;
      expect(keysData).toHaveProperty("keys");
      expect(Array.isArray(keysData.keys)).toBe(true);
      expect(keysData).toHaveProperty("totalCount");

      console.log(
        `‚úÖ Gateway proxies key listing - found ${keysData.keys.length} keys`
      );
    });
  });

  test.describe("Proxy Key Rotation", () => {
    test("should proxy key rotation check", async ({ request }) => {
      const rotationRequest = {
        key_type: "ml_kem_1024",
      };

      const response = await request.post(
        `${GATEWAY_URL}/api/v1/crypto/keys/check-rotation`,
        {
          data: rotationRequest,
        }
      );

      expect(response.ok()).toBe(true);

      const data = await response.json();
      console.log("üîÑ Gateway Rotation Check:", JSON.stringify(data, null, 2));

      expect(data).toHaveProperty("success", true);
      expect(data).toHaveProperty("data");

      const rotationData = data.data;
      expect(rotationData).toHaveProperty("rotationDue");
      expect(rotationData).toHaveProperty("activeKeys");
      expect(typeof rotationData.rotationDue).toBe("boolean");

      console.log("‚úÖ Gateway successfully proxies rotation check");
      console.log(`   Rotation Due: ${rotationData.rotationDue}`);
      console.log(`   Active Keys: ${rotationData.activeKeys}`);
    });

    test("should proxy key rotation trigger", async ({ request }) => {
      const rotationRequest = {
        key_type: "ml_kem_1024",
        force: false,
        reason: "gateway_proxy_test",
      };

      const response = await request.post(
        `${GATEWAY_URL}/api/v1/crypto/keys/rotate`,
        {
          data: rotationRequest,
        }
      );

      // Rotation –º–æ–∂–µ—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –µ—Å–ª–∏ –∫–ª—é—á–∏ —Å–≤–µ–∂–∏–µ, –Ω–æ proxy –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
      if (response.ok()) {
        const data = await response.json();
        console.log(
          "üîÑ Gateway Rotation Trigger:",
          JSON.stringify(data, null, 2)
        );

        expect(data).toHaveProperty("success", true);
        expect(data).toHaveProperty("data");

        console.log("‚úÖ Gateway successfully proxies rotation trigger");
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç crypto-service, –∞ –Ω–µ –æ—Ç gateway
        const data = await response.json();
        expect(data).toHaveProperty("error");
        console.log("‚úÖ Gateway proxies rotation errors correctly");
      }
    });
  });

  test.describe("Circuit Breaker Behavior", () => {
    test("should handle repeated failures gracefully", async ({ request }) => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
      const requests = [];

      for (let i = 0; i < 3; i++) {
        requests.push(request.get(`${GATEWAY_URL}/api/v1/crypto/status`));
      }

      const responses = await Promise.all(requests);

      // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –ª–∏–±–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ª–∏–±–æ fail gracefully
      responses.forEach((response, index) => {
        if (response.ok()) {
          console.log(`‚úÖ Request ${index + 1}: Successfully proxied`);
        } else {
          console.log(
            `‚ö†Ô∏è Request ${index + 1}: Failed with status ${response.status()}`
          );
          // Circuit breaker –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 503 –∏–ª–∏ 502
          expect([502, 503, 504]).toContain(response.status());
        }
      });

      console.log("‚úÖ Circuit breaker behavior tested");
    });

    test("should provide fallback responses when crypto-service fails", async ({
      request,
    }) => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback behavior
      const response = await request.get(`${GATEWAY_URL}/api/v1/crypto/status`);

      if (response.ok()) {
        const data = await response.json();
        expect(data).toHaveProperty("success");
        console.log("‚úÖ Normal response received");
      } else {
        // –ï—Å–ª–∏ crypto-service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, gateway –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å fallback
        expect(response.status()).toBeGreaterThanOrEqual(500);

        try {
          const errorData = await response.json();
          expect(errorData).toHaveProperty("error");
          console.log("‚úÖ Fallback error response provided");
        } catch {
          console.log("‚úÖ Gateway returns appropriate error status");
        }
      }
    });
  });

  test.describe("Request/Response Validation", () => {
    test("should validate request headers", async ({ request }) => {
      const response = await request.get(
        `${GATEWAY_URL}/api/v1/crypto/status`,
        {
          headers: {
            "Content-Type": "application/json",
            "User-Agent": "E2E-Test-Client",
          },
        }
      );

      expect(response.ok()).toBe(true);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ gateway –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏ headers
      const headers = response.headers();
      expect(headers).toHaveProperty("content-type");

      console.log("‚úÖ Request headers handled correctly");
    });

    test("should handle malformed requests", async ({ request }) => {
      const response = await request.post(
        `${GATEWAY_URL}/api/v1/crypto/keys/generate`,
        {
          data: "invalid json",
        }
      );

      // Gateway –¥–æ–ª–∂–µ–Ω –ª–∏–±–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –æ—Ç crypto-service, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ—é
      expect(response.status()).toBeGreaterThanOrEqual(400);

      console.log(
        `‚úÖ Malformed request handled with status ${response.status()}`
      );
    });

    test("should preserve response format", async ({ request }) => {
      const response = await request.get(`${GATEWAY_URL}/api/v1/crypto/status`);

      expect(response.ok()).toBe(true);

      const data = await response.json();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ gateway —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ crypto-service
      expect(data).toHaveProperty("success");
      expect(data).toHaveProperty("data");
      expect(data).toHaveProperty("timestamp");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É quantum protection (Gateway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç camelCase)
      expect(data.data).toHaveProperty("quantumProtection");
      expect(data.data.quantumProtection).toHaveProperty(
        "algorithm",
        "ML-KEM-1024"
      );

      console.log("‚úÖ Response format preserved through proxy");
    });
  });

  test.describe("Performance and Reliability", () => {
    test("should handle concurrent requests", async ({ request }) => {
      const concurrentRequests = 5;
      const requests = [];

      for (let i = 0; i < concurrentRequests; i++) {
        requests.push(request.get(`${GATEWAY_URL}/api/v1/crypto/status`));
      }

      const startTime = Date.now();
      const responses = await Promise.all(requests);
      const totalTime = Date.now() - startTime;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å
      const successfulRequests = responses.filter((r) => r.ok()).length;

      console.log(
        `‚úÖ Concurrent requests: ${successfulRequests}/${concurrentRequests} successful`
      );
      console.log(`   Total time: ${totalTime}ms`);
      console.log(
        `   Average time per request: ${Math.round(
          totalTime / concurrentRequests
        )}ms`
      );

      // –•–æ—Ç—è –±—ã –ø–æ–ª–æ–≤–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π
      expect(successfulRequests).toBeGreaterThanOrEqual(
        Math.ceil(concurrentRequests / 2)
      );
    });

    test("should have reasonable response times", async ({ request }) => {
      const startTime = Date.now();
      const response = await request.get(`${GATEWAY_URL}/api/v1/crypto/status`);
      const responseTime = Date.now() - startTime;

      expect(response.ok()).toBe(true);

      // Proxy –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (< 1 —Å–µ–∫—É–Ω–¥—ã)
      expect(responseTime).toBeLessThan(1000);

      console.log(`‚úÖ Response time: ${responseTime}ms (acceptable)`);
    });
  });

  test.describe("Error Propagation", () => {
    test("should propagate crypto-service errors correctly", async ({
      request,
    }) => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–ø—É—Å—Ç–æ–π payload)
      const response = await request.post(
        `${GATEWAY_URL}/api/v1/crypto/keys/generate`,
        {
          data: {},
        }
      );

      // Gateway –¥–æ–ª–∂–µ–Ω –ª–∏–±–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å (—Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏), –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
      if (response.ok()) {
        const data = await response.json();
        expect(data).toHaveProperty("success", true);
        console.log("‚úÖ Gateway handles empty requests with defaults");
      } else {
        const errorData = await response.json();
        console.log("‚ùå Error Response:", JSON.stringify(errorData, null, 2));

        // Gateway –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –æ—Ç crypto-service
        expect(errorData).toHaveProperty("success", false);
        expect(errorData).toHaveProperty("error");
        console.log(
          "‚úÖ Crypto-service errors propagated correctly through gateway"
        );
      }
    });

    test("should handle timeout scenarios", async ({ request }) => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ timeout (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π timeout)
      try {
        const response = await request.get(
          `${GATEWAY_URL}/api/v1/crypto/status`,
          {
            timeout: 100, // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          }
        );

        if (response.ok()) {
          console.log("‚úÖ Request completed within timeout");
        }
      } catch (error) {
        // Timeout –æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞ –ø—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ–º timeout
        console.log("‚úÖ Timeout handled appropriately");
      }
    });
  });
});
