use crate::websocket::{WebSocketBroadcaster, RealTimeEvent, CryptoEventType};
use crate::websocket::message::RiskAlertType;
use reqwest::Client;
use serde_json::Value;
use std::sync::Arc;
use std::time::Duration;
use tokio::time::interval;
use tracing::{info, warn, error, debug};
use uuid::Uuid;

/// Service –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –æ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
pub struct EventListener {
    broadcaster: Arc<WebSocketBroadcaster>,
    http_client: Client,
    crypto_service_url: String,
    ai_engine_url: String,
    blockchain_service_url: String,
    poll_interval: Duration,
}

impl EventListener {
    pub fn new(
        broadcaster: Arc<WebSocketBroadcaster>,
        crypto_service_url: String,
        ai_engine_url: String,
        blockchain_service_url: String,
        poll_interval: Duration,
    ) -> Self {
        let http_client = Client::builder()
            .timeout(Duration::from_secs(10))
            .build()
            .expect("Failed to create HTTP client");

        Self {
            broadcaster,
            http_client,
            crypto_service_url,
            ai_engine_url,
            blockchain_service_url,
            poll_interval,
        }
    }

    /// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö event listeners
    pub async fn start(&self) {
        info!("üéß Starting EventListener services...");

        // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥–æ–≥–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        let crypto_listener = self.clone();
        let ai_listener = self.clone();
        let blockchain_listener = self.clone();

        tokio::spawn(async move {
            crypto_listener.monitor_crypto_service().await;
        });

        tokio::spawn(async move {
            ai_listener.monitor_ai_engine().await;
        });

        tokio::spawn(async move {
            blockchain_listener.monitor_blockchain_service().await;
        });

        info!("üéß All EventListener services started");
    }

    /// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –æ—Ç crypto-service
    async fn monitor_crypto_service(&self) {
        info!("üîê Starting crypto-service event monitoring");
        let mut interval = interval(self.poll_interval);

        loop {
            interval.tick().await;

            if let Err(e) = self.poll_crypto_service().await {
                warn!("Failed to poll crypto-service: {}", e);
            }
        }
    }

    /// –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ crypto-service
    async fn poll_crypto_service(&self) -> Result<(), Box<dyn std::error::Error>> {
        debug!("Polling crypto-service status...");

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        let status_url = format!("{}/status", self.crypto_service_url);
        let response = self.http_client.get(&status_url).send().await?;

        if response.status().is_success() {
            let status_data: Value = response.json().await?;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
            if let Some(status) = status_data.get("status").and_then(|s| s.as_str()) {
                if status != "healthy" {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å —Å–µ—Ä–≤–∏—Å–æ–º
                    let event_result = self.broadcaster.broadcast_crypto_event(
                        CryptoEventType::ServiceStatusChange,
                        "crypto-service",
                        status,
                        &format!("Crypto service status changed to: {}", status),
                        Some(status_data.clone())
                    ).await;

                    if let Err(e) = event_result {
                        error!("Failed to broadcast crypto service status: {}", e);
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
            if let Some(active_keys) = status_data.get("active_keys").and_then(|k| k.as_u64()) {
                if active_keys > 0 {
                    debug!("Crypto service has {} active keys", active_keys);
                    
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π
                    // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
                }
            }
        }

        Ok(())
    }

    /// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –æ—Ç AI Engine
    async fn monitor_ai_engine(&self) {
        info!("üß† Starting AI Engine event monitoring");
        let mut interval = interval(self.poll_interval);

        loop {
            interval.tick().await;

            if let Err(e) = self.poll_ai_engine().await {
                warn!("Failed to poll AI Engine: {}", e);
            }
        }
    }

    /// –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ AI Engine
    async fn poll_ai_engine(&self) -> Result<(), Box<dyn std::error::Error>> {
        debug!("Polling AI Engine health...");

        let health_url = format!("{}/health", self.ai_engine_url);
        let response = self.http_client.get(&health_url).send().await?;

        if response.status().is_success() {
            let health_data: Value = response.json().await?;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π
            if let Some(ml_status) = health_data.get("ml_models_status").and_then(|s| s.as_str()) {
                if ml_status != "simple_analyzer_ready" {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å ML
                    let notification_result = self.broadcaster.broadcast_system_notification(
                        crate::websocket::NotificationLevel::Warning,
                        "AI Engine Status",
                        &format!("ML models status: {}", ml_status),
                        false
                    ).await;

                    if let Err(e) = notification_result {
                        error!("Failed to broadcast AI Engine status: {}", e);
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if let Some(db_status) = health_data.get("database_status").and_then(|s| s.as_str()) {
                if db_status != "connected" {
                    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ë–î
                    let notification_result = self.broadcaster.broadcast_system_notification(
                        crate::websocket::NotificationLevel::Critical,
                        "AI Engine Database",
                        "AI Engine database connection lost",
                        true
                    ).await;

                    if let Err(e) = notification_result {
                        error!("Failed to broadcast AI Engine DB status: {}", e);
                    }
                }
            }
        } else {
            // AI Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            let notification_result = self.broadcaster.broadcast_system_notification(
                crate::websocket::NotificationLevel::Error,
                "AI Engine Unavailable",
                "AI Risk Engine service is not responding",
                false
            ).await;

            if let Err(e) = notification_result {
                error!("Failed to broadcast AI Engine unavailable: {}", e);
            }
        }

        Ok(())
    }

    /// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –æ—Ç blockchain services
    async fn monitor_blockchain_service(&self) {
        info!("‚õìÔ∏è Starting blockchain service event monitoring");
        let mut interval = interval(self.poll_interval);

        loop {
            interval.tick().await;

            if let Err(e) = self.poll_blockchain_service().await {
                warn!("Failed to poll blockchain service: {}", e);
            }
        }
    }

    /// –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ blockchain service
    async fn poll_blockchain_service(&self) -> Result<(), Box<dyn std::error::Error>> {
        debug!("Polling blockchain service health...");

        let health_url = format!("{}/health", self.blockchain_service_url);
        let response = self.http_client.get(&health_url).send().await?;

        if response.status().is_success() {
            let health_data: Value = response.json().await?;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–ª–æ–∫—á–µ–π–Ω–∞–º
            if let Some(ethereum_status) = health_data.get("ethereum_connection").and_then(|s| s.as_str()) {
                if ethereum_status != "connected" {
                    let notification_result = self.broadcaster.broadcast_system_notification(
                        crate::websocket::NotificationLevel::Error,
                        "Ethereum Connection",
                        "Ethereum blockchain connection lost",
                        false
                    ).await;

                    if let Err(e) = notification_result {
                        error!("Failed to broadcast Ethereum status: {}", e);
                    }
                }
            }

            if let Some(near_status) = health_data.get("near_connection").and_then(|s| s.as_str()) {
                if near_status != "connected" {
                    let notification_result = self.broadcaster.broadcast_system_notification(
                        crate::websocket::NotificationLevel::Error,
                        "NEAR Connection",
                        "NEAR Protocol connection lost",
                        false
                    ).await;

                    if let Err(e) = notification_result {
                        error!("Failed to broadcast NEAR status: {}", e);
                    }
                }
            }
        } else {
            // Blockchain service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            let notification_result = self.broadcaster.broadcast_system_notification(
                crate::websocket::NotificationLevel::Critical,
                "Blockchain Service Unavailable",
                "Blockchain service is not responding - bridge operations may be affected",
                true
            ).await;

            if let Err(e) = notification_result {
                error!("Failed to broadcast blockchain service unavailable: {}", e);
            }
        }

        Ok(())
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –¥–ª—è WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    pub async fn poll_transaction_updates(&self) -> Result<(), Box<dyn std::error::Error>> {
        debug!("Polling transaction updates...");
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç blockchain service –∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        // –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
        /*
        let transaction_event = RealTimeEvent::TransactionStatusUpdate(
            crate::websocket::TransactionStatusEvent {
                transaction_id: "tx_example".to_string(),
                user_id: "user_example".to_string(),
                status: crate::websocket::TransactionStatus::Processing,
                from_chain: "ethereum".to_string(),
                to_chain: "near".to_string(),
                amount: "100.0".to_string(),
                token_symbol: "ETH".to_string(),
                timestamp: chrono::Utc::now(),
                confirmation_blocks: Some(3),
                estimated_completion: Some(chrono::Utc::now() + chrono::Duration::minutes(5)),
            }
        );

        self.broadcaster.broadcast_to_subscribers(transaction_event).await?;
        */

        Ok(())
    }

    /// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
    pub async fn handle_crypto_operation(&self, operation_type: &str, user_id: &str) -> Result<(), Box<dyn std::error::Error>> {
        info!("üîê Handling crypto operation: {} for user: {}", operation_type, user_id);

        match operation_type {
            "key_generation" => {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
                self.broadcaster.broadcast_crypto_event(
                    CryptoEventType::KeyGenerated,
                    "crypto-service",
                    "in_progress",
                    "ML-KEM-1024 key generation started",
                    Some(serde_json::json!({
                        "user_id": user_id,
                        "algorithm": "ML-KEM-1024",
                        "started_at": chrono::Utc::now().to_rfc3339()
                    }))
                ).await?;

                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫ crypto-service
                // let key_response = self.http_client.post(&format!("{}/keys/user/{}/generate", self.crypto_service_url, user_id)).send().await?;
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                self.broadcaster.broadcast_crypto_event(
                    CryptoEventType::KeyGenerated,
                    "crypto-service",
                    "success",
                    "ML-KEM-1024 key generation completed",
                    Some(serde_json::json!({
                        "user_id": user_id,
                        "algorithm": "ML-KEM-1024",
                        "completed_at": chrono::Utc::now().to_rfc3339()
                    }))
                ).await?;
            },
            "encapsulation" => {
                self.broadcaster.broadcast_crypto_event(
                    CryptoEventType::EncapsulationCompleted,
                    "crypto-service",
                    "success",
                    "ML-KEM encapsulation completed",
                    Some(serde_json::json!({
                        "user_id": user_id,
                        "operation": "encapsulation"
                    }))
                ).await?;
            },
            "decapsulation" => {
                self.broadcaster.broadcast_crypto_event(
                    CryptoEventType::DecapsulationCompleted,
                    "crypto-service", 
                    "success",
                    "ML-KEM decapsulation completed",
                    Some(serde_json::json!({
                        "user_id": user_id,
                        "operation": "decapsulation"
                    }))
                ).await?;
            },
            _ => {
                warn!("Unknown crypto operation type: {}", operation_type);
            }
        }

        Ok(())
    }

    /// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI Engine –¥–ª—è risk analysis —Å–æ–±—ã—Ç–∏–π
    pub async fn handle_risk_analysis(&self, user_id: &str, transaction_id: &str, risk_score: f64) -> Result<(), Box<dyn std::error::Error>> {
        info!("üß† Handling risk analysis for transaction: {} (score: {})", transaction_id, risk_score);

        let risk_level = if risk_score >= 0.8 {
            crate::websocket::RiskLevel::Critical
        } else if risk_score >= 0.6 {
            crate::websocket::RiskLevel::High
        } else if risk_score >= 0.4 {
            crate::websocket::RiskLevel::Medium
        } else {
            crate::websocket::RiskLevel::Low
        };

        // –°–æ–∑–¥–∞–µ–º risk alert event
        let risk_alert = RealTimeEvent::RiskAlert(crate::websocket::RiskAlertEvent {
            alert_id: Uuid::new_v4().to_string(),
            user_id: Some(user_id.to_string()),
            transaction_id: Some(transaction_id.to_string()),
            risk_level: risk_level.clone(),
            risk_score,
            alert_type: if risk_score >= 0.8 {
                RiskAlertType::HighRiskTransaction
            } else if risk_score >= 0.6 {
                RiskAlertType::AnomalyDetected
            } else {
                RiskAlertType::ThresholdExceeded
            },
            message: format!("Transaction risk analysis completed: {} risk (score: {:.2})", 
                match risk_level {
                    crate::websocket::RiskLevel::Critical => "CRITICAL",
                    crate::websocket::RiskLevel::High => "HIGH", 
                    crate::websocket::RiskLevel::Medium => "MEDIUM",
                    crate::websocket::RiskLevel::Low => "LOW",
                }, risk_score),
            timestamp: chrono::Utc::now(),
            requires_action: risk_score >= 0.8,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º alert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.broadcaster.broadcast_to_user(user_id, risk_alert).await?;

        // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º
        if risk_score >= 0.8 {
            let urgent_alert = RealTimeEvent::RiskAlert(crate::websocket::RiskAlertEvent {
                alert_id: Uuid::new_v4().to_string(),
                user_id: Some(user_id.to_string()),
                transaction_id: Some(transaction_id.to_string()),
                risk_level: crate::websocket::RiskLevel::Critical,
                risk_score,
                alert_type: RiskAlertType::HighRiskTransaction,
                message: "CRITICAL: High-risk transaction detected by AI Engine".to_string(),
                timestamp: chrono::Utc::now(),
                requires_action: true,
            });

            self.broadcaster.broadcast_urgent(urgent_alert).await?;
        }

        Ok(())
    }

    // Test helper methods for accessing private fields
    #[cfg(test)]
    pub fn get_crypto_service_url(&self) -> &str {
        &self.crypto_service_url
    }

    #[cfg(test)]
    pub fn get_ai_engine_url(&self) -> &str {
        &self.ai_engine_url
    }

    #[cfg(test)]
    pub fn get_blockchain_service_url(&self) -> &str {
        &self.blockchain_service_url
    }

    #[cfg(test)]
    pub fn get_poll_interval(&self) -> Duration {
        self.poll_interval
    }
}

impl Clone for EventListener {
    fn clone(&self) -> Self {
        Self {
            broadcaster: self.broadcaster.clone(),
            http_client: self.http_client.clone(),
            crypto_service_url: self.crypto_service_url.clone(),
            ai_engine_url: self.ai_engine_url.clone(),
            blockchain_service_url: self.blockchain_service_url.clone(),
            poll_interval: self.poll_interval,
        }
    }
}

/// –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ EventListener
pub fn create_event_listener(broadcaster: Arc<WebSocketBroadcaster>) -> EventListener {
    // URL-–∞–¥—Ä–µ—Å–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é)
    let crypto_service_url = std::env::var("CRYPTO_SERVICE_URL")
        .unwrap_or_else(|_| "http://localhost:4001".to_string());
    let ai_engine_url = std::env::var("AI_ENGINE_URL")
        .unwrap_or_else(|_| "http://localhost:4005".to_string());
    let blockchain_service_url = std::env::var("BLOCKCHAIN_SERVICE_URL")
        .unwrap_or_else(|_| "http://localhost:4003".to_string());

    EventListener::new(
        broadcaster,
        crypto_service_url,
        ai_engine_url,
        blockchain_service_url,
        Duration::from_secs(30), // –û–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    )
}